"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalConfig = getGlobalConfig;
exports.setGlobalConfig = setGlobalConfig;
exports.assembleBuildConfig = assembleBuildConfig;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let globalConfig = {
  method: true,
  url: true,
  params: false,
  data: true,
  status: true,
  statusText: true,
  logger: console.log,
  prefixText: 'Axios',
  dateFormat: false,
  headers: false
};

function getGlobalConfig() {
  return globalConfig;
}

function setGlobalConfig(config) {
  globalConfig = _objectSpread(_objectSpread({}, globalConfig), config);
}

function assembleBuildConfig(config) {
  return _objectSpread(_objectSpread({}, globalConfig), config);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vY29uZmlnLnRzIl0sIm5hbWVzIjpbImdsb2JhbENvbmZpZyIsIm1ldGhvZCIsInVybCIsInBhcmFtcyIsImRhdGEiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwibG9nZ2VyIiwiY29uc29sZSIsImxvZyIsInByZWZpeFRleHQiLCJkYXRlRm9ybWF0IiwiaGVhZGVycyIsImdldEdsb2JhbENvbmZpZyIsInNldEdsb2JhbENvbmZpZyIsImNvbmZpZyIsImFzc2VtYmxlQnVpbGRDb25maWciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQUlBLFlBQXVDLEdBQUc7QUFDMUNDLEVBQUFBLE1BQU0sRUFBRSxJQURrQztBQUUxQ0MsRUFBQUEsR0FBRyxFQUFFLElBRnFDO0FBRzFDQyxFQUFBQSxNQUFNLEVBQUUsS0FIa0M7QUFJMUNDLEVBQUFBLElBQUksRUFBRSxJQUpvQztBQUsxQ0MsRUFBQUEsTUFBTSxFQUFFLElBTGtDO0FBTTFDQyxFQUFBQSxVQUFVLEVBQUUsSUFOOEI7QUFPMUNDLEVBQUFBLE1BQU0sRUFBRUMsT0FBTyxDQUFDQyxHQVAwQjtBQVExQ0MsRUFBQUEsVUFBVSxFQUFFLE9BUjhCO0FBUzFDQyxFQUFBQSxVQUFVLEVBQUUsS0FUOEI7QUFVMUNDLEVBQUFBLE9BQU8sRUFBRTtBQVZpQyxDQUE5Qzs7QUFhQSxTQUFTQyxlQUFULEdBQTJCO0FBQ3ZCLFNBQU9iLFlBQVA7QUFDSDs7QUFFRCxTQUFTYyxlQUFULENBQXlCQyxNQUF6QixFQUFrRDtBQUM5Q2YsRUFBQUEsWUFBWSxtQ0FDTEEsWUFESyxHQUVMZSxNQUZLLENBQVo7QUFJSDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE2QkQsTUFBN0IsRUFBdUg7QUFDbkgseUNBQ09mLFlBRFAsR0FFT2UsTUFGUDtBQUlIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXJyb3JMb2dDb25maWcsIEdsb2JhbExvZ0NvbmZpZywgUmVxdWVzdExvZ0NvbmZpZywgUmVzcG9uc2VMb2dDb25maWcgfSBmcm9tICcuL3R5cGVzJztcblxubGV0IGdsb2JhbENvbmZpZzogUmVxdWlyZWQ8R2xvYmFsTG9nQ29uZmlnPiA9IHtcbiAgICBtZXRob2Q6IHRydWUsXG4gICAgdXJsOiB0cnVlLFxuICAgIHBhcmFtczogZmFsc2UsXG4gICAgZGF0YTogdHJ1ZSxcbiAgICBzdGF0dXM6IHRydWUsXG4gICAgc3RhdHVzVGV4dDogdHJ1ZSxcbiAgICBsb2dnZXI6IGNvbnNvbGUubG9nLFxuICAgIHByZWZpeFRleHQ6ICdBeGlvcycsXG4gICAgZGF0ZUZvcm1hdDogZmFsc2UsXG4gICAgaGVhZGVyczogZmFsc2UsXG59O1xuXG5mdW5jdGlvbiBnZXRHbG9iYWxDb25maWcoKSB7XG4gICAgcmV0dXJuIGdsb2JhbENvbmZpZztcbn1cblxuZnVuY3Rpb24gc2V0R2xvYmFsQ29uZmlnKGNvbmZpZzogR2xvYmFsTG9nQ29uZmlnKSB7XG4gICAgZ2xvYmFsQ29uZmlnID0ge1xuICAgICAgICAuLi5nbG9iYWxDb25maWcsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhc3NlbWJsZUJ1aWxkQ29uZmlnKGNvbmZpZzogUmVxdWVzdExvZ0NvbmZpZyB8IFJlc3BvbnNlTG9nQ29uZmlnIHwgRXJyb3JMb2dDb25maWcpOiBSZXF1aXJlZDxHbG9iYWxMb2dDb25maWc+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5nbG9iYWxDb25maWcsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xufVxuXG5leHBvcnQge1xuICAgIGdldEdsb2JhbENvbmZpZyxcbiAgICBzZXRHbG9iYWxDb25maWcsXG4gICAgYXNzZW1ibGVCdWlsZENvbmZpZyxcbn07XG4iXX0=