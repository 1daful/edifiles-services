"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorLogger = errorLogger;
exports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;

var _config = require("../common/config");

var _stringBuilder = _interopRequireDefault(require("../common/string-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function errorLoggerWithoutPromise(error, config = {}) {
  if (!error.config) {
    return error;
  }

  const {
    config: {
      method,
      baseURL,
      params,
      url
    },
    response
  } = error;
  let status, statusText, data, headers;

  if (response) {
    status = response.status;
    statusText = response.statusText;
    data = response.data;
    headers = response.headers;
  }

  const buildConfig = (0, _config.assembleBuildConfig)(config);
  const stringBuilder = new _stringBuilder.default(buildConfig);
  const log = stringBuilder.makeLogTypeWithPrefix('Error').makeDateFormat(new Date()).makeMethod(method).makeUrl(url, baseURL).makeParams(params).makeStatus(status, statusText).makeHeader(headers).makeData(data).build();
  buildConfig.logger(log);
  return error;
}

function errorLogger(error, config) {
  return Promise.reject(errorLoggerWithoutPromise(error, config));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvZXJyb3IudHMiXSwibmFtZXMiOlsiZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSIsImVycm9yIiwiY29uZmlnIiwibWV0aG9kIiwiYmFzZVVSTCIsInBhcmFtcyIsInVybCIsInJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJoZWFkZXJzIiwiYnVpbGRDb25maWciLCJzdHJpbmdCdWlsZGVyIiwiU3RyaW5nQnVpbGRlciIsImxvZyIsIm1ha2VMb2dUeXBlV2l0aFByZWZpeCIsIm1ha2VEYXRlRm9ybWF0IiwiRGF0ZSIsIm1ha2VNZXRob2QiLCJtYWtlVXJsIiwibWFrZVBhcmFtcyIsIm1ha2VTdGF0dXMiLCJtYWtlSGVhZGVyIiwibWFrZURhdGEiLCJidWlsZCIsImxvZ2dlciIsImVycm9yTG9nZ2VyIiwiUHJvbWlzZSIsInJlamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQTs7QUFDQTs7OztBQUVBLFNBQVNBLHlCQUFULENBQW1DQyxLQUFuQyxFQUFzREMsTUFBc0IsR0FBRyxFQUEvRSxFQUFtRjtBQUMvRSxNQUFJLENBQUNELEtBQUssQ0FBQ0MsTUFBWCxFQUFtQjtBQUNmLFdBQU9ELEtBQVA7QUFDSDs7QUFFRCxRQUFNO0FBQUNDLElBQUFBLE1BQU0sRUFBRTtBQUFFQyxNQUFBQSxNQUFGO0FBQVVDLE1BQUFBLE9BQVY7QUFBbUJDLE1BQUFBLE1BQW5CO0FBQTJCQyxNQUFBQTtBQUEzQixLQUFUO0FBQTJDQyxJQUFBQTtBQUEzQyxNQUF1RE4sS0FBN0Q7QUFFQSxNQUFJTyxNQUFKLEVBQVlDLFVBQVosRUFBd0JDLElBQXhCLEVBQThCQyxPQUE5Qjs7QUFDQSxNQUFJSixRQUFKLEVBQWM7QUFDVkMsSUFBQUEsTUFBTSxHQUFHRCxRQUFRLENBQUNDLE1BQWxCO0FBQ0FDLElBQUFBLFVBQVUsR0FBR0YsUUFBUSxDQUFDRSxVQUF0QjtBQUNBQyxJQUFBQSxJQUFJLEdBQUdILFFBQVEsQ0FBQ0csSUFBaEI7QUFDQUMsSUFBQUEsT0FBTyxHQUFHSixRQUFRLENBQUNJLE9BQW5CO0FBQ0g7O0FBRUQsUUFBTUMsV0FBVyxHQUFHLGlDQUFvQlYsTUFBcEIsQ0FBcEI7QUFFQSxRQUFNVyxhQUFhLEdBQUcsSUFBSUMsc0JBQUosQ0FBa0JGLFdBQWxCLENBQXRCO0FBQ0EsUUFBTUcsR0FBRyxHQUFHRixhQUFhLENBQ3BCRyxxQkFETyxDQUNlLE9BRGYsRUFFUEMsY0FGTyxDQUVRLElBQUlDLElBQUosRUFGUixFQUdQQyxVQUhPLENBR0loQixNQUhKLEVBSVBpQixPQUpPLENBSUNkLEdBSkQsRUFJTUYsT0FKTixFQUtQaUIsVUFMTyxDQUtJaEIsTUFMSixFQU1QaUIsVUFOTyxDQU1JZCxNQU5KLEVBTVlDLFVBTlosRUFPUGMsVUFQTyxDQU9JWixPQVBKLEVBUVBhLFFBUk8sQ0FRRWQsSUFSRixFQVNQZSxLQVRPLEVBQVo7QUFXQWIsRUFBQUEsV0FBVyxDQUFDYyxNQUFaLENBQW1CWCxHQUFuQjtBQUVBLFNBQU9kLEtBQVA7QUFDSDs7QUFFRCxTQUFTMEIsV0FBVCxDQUFxQjFCLEtBQXJCLEVBQXdDQyxNQUF4QyxFQUFpRTtBQUM3RCxTQUFPMEIsT0FBTyxDQUFDQyxNQUFSLENBQTJCN0IseUJBQXlCLENBQUNDLEtBQUQsRUFBUUMsTUFBUixDQUFwRCxDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc0Vycm9yIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgRXJyb3JMb2dDb25maWcgfSBmcm9tICcuLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgYXNzZW1ibGVCdWlsZENvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi9jb25maWcnO1xuaW1wb3J0IFN0cmluZ0J1aWxkZXIgZnJvbSAnLi4vY29tbW9uL3N0cmluZy1idWlsZGVyJztcblxuZnVuY3Rpb24gZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZShlcnJvcjogQXhpb3NFcnJvciwgY29uZmlnOiBFcnJvckxvZ0NvbmZpZyA9IHt9KSB7XG4gICAgaWYgKCFlcnJvci5jb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yXG4gICAgfVxuXG4gICAgY29uc3Qge2NvbmZpZzogeyBtZXRob2QsIGJhc2VVUkwsIHBhcmFtcywgdXJsIH0sIHJlc3BvbnNlfSA9IGVycm9yO1xuXG4gICAgbGV0IHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaGVhZGVycztcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICBzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdHVzVGV4dDtcbiAgICAgICAgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIGhlYWRlcnMgPSByZXNwb25zZS5oZWFkZXJzO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1aWxkQ29uZmlnID0gYXNzZW1ibGVCdWlsZENvbmZpZyhjb25maWcpO1xuXG4gICAgY29uc3Qgc3RyaW5nQnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKGJ1aWxkQ29uZmlnKTtcbiAgICBjb25zdCBsb2cgPSBzdHJpbmdCdWlsZGVyXG4gICAgICAgIC5tYWtlTG9nVHlwZVdpdGhQcmVmaXgoJ0Vycm9yJylcbiAgICAgICAgLm1ha2VEYXRlRm9ybWF0KG5ldyBEYXRlKCkpXG4gICAgICAgIC5tYWtlTWV0aG9kKG1ldGhvZClcbiAgICAgICAgLm1ha2VVcmwodXJsLCBiYXNlVVJMKVxuICAgICAgICAubWFrZVBhcmFtcyhwYXJhbXMpXG4gICAgICAgIC5tYWtlU3RhdHVzKHN0YXR1cywgc3RhdHVzVGV4dClcbiAgICAgICAgLm1ha2VIZWFkZXIoaGVhZGVycylcbiAgICAgICAgLm1ha2VEYXRhKGRhdGEpXG4gICAgICAgIC5idWlsZCgpO1xuXG4gICAgYnVpbGRDb25maWcubG9nZ2VyKGxvZyk7XG5cbiAgICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGVycm9yTG9nZ2VyKGVycm9yOiBBeGlvc0Vycm9yLCBjb25maWc/OiBFcnJvckxvZ0NvbmZpZykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdDxBeGlvc0Vycm9yPihlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlKGVycm9yLCBjb25maWcpKTtcbn1cblxuZXhwb3J0IHsgZXJyb3JMb2dnZXIsIGVycm9yTG9nZ2VyV2l0aG91dFByb21pc2UgfTtcbiJdfQ==