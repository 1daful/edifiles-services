"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserNeighbors = exports.insertUsers = exports.getUsers = exports.updateUser = exports.deleteUser = exports.getUser = exports.insertUser = void 0;
const error_1 = require("../error");
// FIXME: is this an upsert endpoint?
function insertUser(axios, userData) {
    return axios
        .post(`/user`, userData)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.insertUser = insertUser;
function getUser(axios, userId) {
    return axios
        .get(`/user/${userId}`)
        .then(({ data }) => {
        return data;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.getUser = getUser;
function deleteUser(axios, userId) {
    return axios
        .delete(`/user/${userId}`)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.deleteUser = deleteUser;
function updateUser(axios, userId, userData) {
    return axios
        .patch(`/user/${userId}`, userData)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.updateUser = updateUser;
function getUsers(axios, options) {
    return axios
        .get(`/users`, {
        params: options,
    })
        .then(({ data }) => {
        return data;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.getUsers = getUsers;
// FIXME: is this an endpoint?
function insertUsers(axios, users) {
    return axios
        .post(`/users`, users)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.insertUsers = insertUsers;
function getUserNeighbors(axios, { userId, cursorOptions }) {
    return axios
        .get(`/user/${userId}/neighbors`, {
        params: cursorOptions,
    })
        .then(({ data }) => {
        return data;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.getUserNeighbors = getUserNeighbors;
//# sourceMappingURL=user.js.map