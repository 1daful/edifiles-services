"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItemNeighbors = exports.upsertItems = exports.getItems = exports.deleteItemCategory = exports.insertItemCategory = exports.updateItem = exports.deleteItem = exports.getItem = exports.upsertItem = void 0;
const error_1 = require("../error");
function upsertItem(axios, itemData) {
    return axios
        .post(`/item`, itemData)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.upsertItem = upsertItem;
function getItem(axios, itemId) {
    return axios
        .get(`/item/${itemId}`)
        .then(({ data }) => {
        return data;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.getItem = getItem;
function deleteItem(axios, itemId) {
    return axios
        .delete(`/item/${itemId}`)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.deleteItem = deleteItem;
function updateItem(axios, itemId, itemData) {
    return axios
        .patch(`/item/${itemId}`, itemData)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.updateItem = updateItem;
function insertItemCategory(axios, itemId, category) {
    return axios
        .put(`/item/${itemId}/category/${category}`)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.insertItemCategory = insertItemCategory;
function deleteItemCategory(axios, itemId, category) {
    return axios
        .delete(`/item/${itemId}/category/${category}`)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.deleteItemCategory = deleteItemCategory;
function getItems(axios, options) {
    return axios
        .get(`/items`, {
        params: options,
    })
        .then(({ data }) => {
        return data;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.getItems = getItems;
function upsertItems(axios, items) {
    return axios
        .post(`/items`, items)
        .then(({ data }) => {
        return data.RowAffected;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.upsertItems = upsertItems;
function getItemNeighbors(axios, { itemId, category = "", cursorOptions }) {
    return axios
        .get(`/item/${itemId}/neighbors/${category}`, {
        params: cursorOptions,
    })
        .then(({ data }) => {
        return data;
    })
        .catch((exception) => {
        const { response } = exception;
        return Promise.reject(new error_1.GorseException(response.status, response.data));
    });
}
exports.getItemNeighbors = getItemNeighbors;
//# sourceMappingURL=item.js.map